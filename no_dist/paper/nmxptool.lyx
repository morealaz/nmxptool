#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass elsart
\begin_preamble
\journal{Computers \& Geosciences}

\usepackage{url}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement h
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
nmxptool: open-source and cross-platform software for Nanometrics seismic
 data acquisition
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thanksref{sourcesite}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Matteo Quintiliani
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
corauthref{cor}
\end_layout

\end_inset


\end_layout

\begin_layout Author Address
Istituto Nazionale di Geofisica e Vulcanologia,
\newline
Via di Vigna Murata 605,
 00143 Roma, Italy
\family typewriter

\newline
Draft Revision
\family default

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thanksref{revision}
\end_layout

\end_inset


\end_layout

\begin_layout Author Email
quintiliani@ingv.it
\end_layout

\begin_layout Abstract
The Nanometrics servers NaqsServer and DataServer can provide on-line access
 to seismic data and state-of-health information accepting TCP/IP connections
 and forwarding the requested data to each client program.
 NaqsServer collates and stores in near-real-time incoming data in ringbuffers
 whereas DataServer provides data of the past stored in NaqsServer ringbuffers.
 In order to implement the Nanometrics subscription protocols, the author
 developed a software consisting of a library called libnmxp and a tool
 called nmxptool.
 The library exposes a set of documented APIs which allow to communicate
 with the Nanometrics servers.
 The tool, based on libnmxp, allows to retrieve or monitor real-time data
 and data of the past.
 nmxptool can be used in three different ways: stand-alone to monitor data
 or save retrieved data in mini-SEED records, launched as an Earthworm module
 to redirect data into the EW-rings or like a Seedlink plug-in to feed the
 SL-server.
 The main contribution, as regards other similar software, is the capability
 to manage Raw Stream connections by buffering and sorting all received
 packets, included the retransmitted ones, guaranteeing a good compromise
 between data continuity and low latency.
 Besides, nmxptool allows to retrieve Data-On-Demand with minimum delay
 after request.
 Software is open-source and released under GNU Library General Public License.
 It has been written in C language using the GNU Build Tools (automake,
 autoconf and configure script) and taking in account the cross-platform
 compilation aspects, in fact, it can run on almost all the Unix-like operating
 systems, Mac OS X, Windows and either 32-bit or 64-bit architectures.
\end_layout

\begin_layout Abstract
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thanks[sourcesite]{Source code is available from 
\backslash
url{http://mednet.rm.ingv.it/nmxptool.php}} 
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
thanks[revision]{
\backslash
small 
\backslash
itshape CVS $ $Revision: 1.35 $ $ -- $ $Date: 2008-08-20 10:42:32 $ $} 
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
corauth[cor]{Tel.: +39-06-51860671}
\end_layout

\end_inset

 
\end_layout

\begin_layout Keywords
Seismic data acquisition; software.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
A typical configuration of a seismic data flow from the seismic station,
 through Nanometrics servers, as far as the software clients is shown in
 figure 
\begin_inset LatexCommand ref
reference "fig:stationclients"

\end_inset

.
 The flow can be split in two logical parts:
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Seismic Station - Nanometrics Server
\series default
\emph default
: seismic data are converted in 
\emph on
NMXP
\emph default
 format and sent into UDP packets to the Nanometrics Servers.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Nanometrics Server - Client
\series default
\emph default
 : software client connect to the Nanometrics Servers for retrieving real-time
 and off-line data, instrument state-of-health and triggers.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /Users/mtheo/Desktop/cvswork/nmxptool/no_dist/paper/images/nanometrics_station_client.eps.gz
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Caption

\begin_layout Standard

\shape italic
Typical configuration at INGV of a seismic data flow from seismic stations
 by a satellite connection, through Nanometrics Servers, as far as the client
 programs.
 In order to interact with NaqsServer or DataServer any client must implement
 the subscription protocols Private Data Stream or Data Access Protocol
 respectively.
 NaqsServer manages a circular buffer of packets and you can configure,
 or not, the retransmissions of missing packets in order to fill the gaps.
 Priority of retransmissions is in inverse proportion to the age of the
 packet.
 The most important difference between a NaqsServer and a DataServer is
 that the first one provides data in near-real-time whereas DataServer spreads
 archived data into the past.
\end_layout

\end_inset


\begin_inset LatexCommand label
name "fig:stationclients"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the context of this paper we are considering more the second part (the
 right side in the figure 
\begin_inset LatexCommand ref
reference "fig:stationclients"

\end_inset

), especially the software implementation aspects in the interaction of
 a software client with both NaqsServer and DataServer as well-documented
 into the manual 
\begin_inset LatexCommand cite
key "nanometrics"

\end_inset

.
 The kinds of the connection and the related behaviours can be briefly schematiz
ed:
\end_layout

\begin_layout Itemize

\series bold
NaqsServer
\end_layout

\begin_deeper
\begin_layout Itemize
Data may be requested by channel.
 Real-time data can be retrieved in two different ways by the following
 streams:
\end_layout

\begin_deeper
\begin_layout Enumerate

\shape italic
Buffered Stream
\shape default
: short-term complete data stream.
 Packets are in chronological order but small gaps whenever a retransmission
 occurs.
\end_layout

\begin_layout Enumerate

\shape italic
Raw Stream
\shape default
: packets are forwarded in the original order.
 Packets may be missing, duplicated, or out of order, but minimal delay.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
DataServer
\end_layout

\begin_deeper
\begin_layout Itemize
Data may be requested by channel, start time and end time.
 Archived data are retrieved chronologically for each channel.
\end_layout

\end_deeper
\begin_layout Standard
Every client program that needs to communicate with NaqsServer or DataServer,
 as the software developed by the author, must implement the following subscript
ion protocols:
\end_layout

\begin_layout Itemize

\series bold
\shape italic
Private Data Stream
\series default
 version 1.4
\shape default
, subscription protocol to interact with a NaqsServer.
\end_layout

\begin_layout Itemize

\series bold
\shape italic
Data Access Protocol
\series default
 version 1.0
\shape default
, subscription protocol to interact with a DataServer.
 
\end_layout

\begin_layout Standard
Why developing a new software?
\end_layout

\begin_layout Standard
The main problem[s] when you connect to NaqServer by the 
\shape italic
Buffered Stream
\shape default
 is that you can get a gap for each retransmitted packet, whereas when you
 connect by the 
\shape italic
Raw Stream,
\shape default
 the retransmitted packets are received disorderly.
\end_layout

\begin_layout Standard
Both existing software 
\begin_inset LatexCommand citet
key "naqsplugin"

\end_inset

 and 
\begin_inset LatexCommand citet
key "naqs2ew"

\end_inset

 developed for redirecting data from NaqsServer into the Seedlink of 
\begin_inset LatexCommand citet
key "seiscomp"

\end_inset

 and Earthworm of 
\begin_inset LatexCommand citet
key "earthworm"

\end_inset

 respectively, are not capable of buffering and reordering the retransmitted
 packets received from the NaqsServer.
\end_layout

\begin_layout Standard
nmxptool is able to receive all kinds of packet, buffer the packets when
 a gap occurs, sort them and redirect data in chronologically order into
 the Seedlink or Earthworm system or repacket them in mini-SEED records
 by 
\begin_inset LatexCommand citet
key "seedmanual"

\end_inset

.
 More details about possible software interactions beetween the Nanometrics
 servers and nmxptool will be described later and showned in figure 
\begin_inset LatexCommand ref
reference "fig:nmxptoolusages"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
manage and chronologically order them in a buffer when is needed, that is
 when a retransmission occurs, and finally it can redirect data
\end_layout

\end_inset


\end_layout

\begin_layout Section
Contributions and features
\end_layout

\begin_layout Standard
The main contribution offered by nmxptool, as regards other similar software,
 is the capability to manage Raw Stream connections by buffering and sorting
 all received packets, included the retransmitted ones, guaranteeing a good
 compromise between data continuity and low latency.
 Besides, nmxptool allows to retrieve Data-On-Demand from NaqsServer with
 minimum delay after request.
 Another important property is the capability that allows to restart the
 data flow from the last sample received before the last program shutdown
 or fatal disconnections, in fact, nmxptool can retrieve buffered data from
 NaqsServer or data of the past from the DataServer and joining it in near-real-
time to the data that is flowing from the NaqsServer.
\end_layout

\begin_layout Standard
In order to be able to fill the gaps due to the missing packets and retrieve
 data-on-demand, the NaqsServer should be configured to request the retransmissi
ons of packets and, on the other side, the seismic station should be configured
 to send the requested packets.
 If the NaqsServer or the stations are not configured for the retransmissions
 you will not able to fill the gaps or receive data requested on-demand.
 The default configuration of NaqsServer automatically enables requests
 of retransmission of the missing packet, however, the variable to set is
 
\shape italic
RetxRequest
\shape default
 inside the section 
\shape italic
NetworkInterface
\shape default
 of the file Naqs.ini.
 For example:
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "basicstyle={\scriptsize},commentstyle={\textit},keywords={Datastream,NetworkInterface,DataBufferLength,RetxRequest},morecomment={[l]//}"
inline false
status open

\begin_layout Standard

[ NetworkInterface ]
\end_layout

\begin_layout Standard

  Port = 32000           // UDP port for incoming NMX data (usually 32000)
\end_layout

\begin_layout Standard

  SendDelay = 250        // milliseconds to delay after each send
\end_layout

\begin_layout Standard

  RetxRequest = Enabled
\end_layout

\begin_layout Standard

  MulticastGroup = 224.1.1.1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If 
\shape italic
RetxRequest
\shape default
 is not enabled on both NaqsServer and seismic station then the buffering
 by nmxptool will be ineffective and you will get a gap for each missing
 packet.
\end_layout

\begin_layout Standard
Moreover, in order to allow data continuity when short disconnections to
 NaqsServer occur it would be better to set to a high value the variable
 
\shape italic
DataBufferLength
\shape default
 inside the section 
\shape italic
Datastream
\shape default
 of the file Naqs.ini.
 Presently, the maximum value is equal to 100, then for example:
\end_layout

\begin_layout Quotation
\begin_inset listings
lstparams "basicstyle={\scriptsize},commentstyle={\textit},keywords={Datastream,NetworkInterface,DataBufferLength,RetxRequest},morecomment={[l]//}"
inline false
status open

\begin_layout Standard

[ Datastream ]
\end_layout

\begin_layout Standard

  Port = 28000           // TCP port for control/data connections to Naqs
\end_layout

\begin_layout Standard

  Password = none        // access password (not used in version 1.3)
\end_layout

\begin_layout Standard

  MaxConnections = 10    // maximum number of simultaneous connections
\end_layout

\begin_layout Standard

  SocketType = Direct    // connection type (Direct or Callback)
\end_layout

\begin_layout Standard

  DataBufferLength = 100 // Buffer length for data channels (# packets)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Latency vs data continuity
\end_layout

\begin_layout Standard
If the main target is the data archiving, certainly, it will be more important
 having data stored less fragmented as possible, on the other hand, if the
 main target is the earthquake location then it would be preferable a low
 latency of data flow even if it should suffer from some small gap.
 Supposing the data received is continuous and ordered then the latency
 will be only due to the means of transmission (cable, satellite connection)
 and due to the time spent from the software to process the data.
 But, in order to guarantee most the continuity of the data and if we consider
 also that the packets can be missed, requested and retransmitted, then
 the latency could be further increased by the possible wait of the missing
 packet.
 nmxptool allows to declare the maximum tolerable latency you can accept,
 only after that maximum wait, nmxptool breaks up the continuous data flow
 and .
 The figure 
\begin_inset LatexCommand ref
reference "fig:maxtolerablelatency"

\end_inset

 shows the case when a packet is retransmitted out of order within a 
\shape italic
Raw Stream
\shape default
 connection.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /Users/mtheo/Desktop/cvswork/nmxptool/no_dist/paper/images/nanometrics_gaps.eps.gz
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Caption

\begin_layout Standard

\shape italic
Main parameter to set for the Raw Stream connection is the Maximum-Tolerable-Lat
ency you can accept, a sort of short-term-completion but managed by the
 client and not by the server.
 nmxptool slows down the acquisition only when it is waiting for a missing
 packet and it waits that packets up to that maximum time.
 Aiming to guarantee continuouity of the data, chronological order of packets,
 minimum latency and minimum number of gaps, nmxptool is able to manage
 a buffer of all kinds of packet, comprised the packets retransmitted out
 of order.
 *** Packet number 2 will be retrieved and used to fill the gap.
 Packet number 9 will be lost.
 *** Type of compressed packet is equal to 1.
 bit 5 = 1 indicates the packet is being restransmitted, Type of retransmitted
 packet is 33, that is 1 + 32 
\end_layout

\end_inset


\begin_inset LatexCommand label
name "fig:maxtolerablelatency"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data On Demand
\end_layout

\begin_layout Standard
TODO: DataOnDemand figure and descriptions.
\end_layout

\begin_layout Standard
Moreover, for retrieving data-on-demand....
 Timeoutrecv....
 Packet type 1+32+64
\end_layout

\begin_layout Standard
nmxptool and libnmxp have been also designed to retrieve with minimum delay
 the data requested by the java application DataOnDemand developed by Nanometric
s.
 nmxptool is listening to the packets which are chronologically ordered
 when they are flowing.
 These packets are flushed only after a time-out of inactivity, that is
 after a time-out.
\end_layout

\begin_layout Subsection
Data continuity after disconnection
\end_layout

\begin_layout Standard
Since version 1.1.8, nmxptool offers a feature to allow the data continuity
 between program restarts.
\end_layout

\begin_layout Standard
This feature is based on the ringbuffer management on the NaqsServer and
 the DataServer side.
 1) NaqsServer provides near-realtime data and it can buffer data up to
 100 packets for each channel.
 file: Naqs.ini section: [Datastream] parameter: DataBufferLength (range
 is [0..100], set to 100 if it is possible) 2) DataServer stores data of the
 past and you can retrieve available data defining start time and end time.
\end_layout

\begin_layout Standard
Using option "-F" automatically involves, before exiting from the program,
 the save of the time of the last sample received for each channel.
 When nmxptool restarts, it uses this time to retrieve missed data from
 the small buffer of the NaqsServer.
 This option is enough if you know that your disconnections will be short
 and if you can not access to the DataServer.
\end_layout

\begin_layout Standard
Channel state
\end_layout

\begin_layout Subsection
Features
\end_layout

\begin_layout Standard
nmxptool facilities...
\end_layout

\begin_layout Standard
In order to enable nmxptool for storing data in mini-SEED format, feeding
 Seedlink server or redirecting data into an Earthworm ring, some open-source
 software could be required, the respective software are libmseed, Seedlink
 and Earthworm.
 These software and how to link them against nmxptool will be described
 in the section 
\begin_inset LatexCommand ref
reference "sec:Development"

\end_inset

.
\end_layout

\begin_layout Section
Development and compilation
\begin_inset LatexCommand label
name "sec:Development"

\end_inset


\end_layout

\begin_layout Standard
nmxptool has been written in C language using the GNU Build Tools (automake,
 autoconf and configure script) and taking in account the cross-platform
 compilation aspects, in fact, it can run on almost all the Unix-like operating
 systems, Mac OS X, Windows and either 32-bit or 64-bit architectures as
 showned in table 
\begin_inset LatexCommand ref
reference "tab:architectures"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
\size scriptsize
Little Endian
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
\size scriptsize
Big Endian
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\size scriptsize
32-bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\size scriptsize
64-bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\size scriptsize
32-bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\size scriptsize
64-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\shape italic
\size scriptsize
Linux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\shape italic
\size scriptsize
Solaris
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\shape italic
\size scriptsize
Mac OS X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\shape italic
\size scriptsize
Free BSD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
\shape italic
\size scriptsize
Windows-MinGW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size scriptsize
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Caption

\begin_layout Standard

\emph on
Supported platforms: operating systems and architectures where nmxptool
 has been compiled with success by the GNU make and C compiler.
 On Solaris system it is possible to use also the SUN make and C compiler.
 At INGV, nmxptool is mainly used within the SeisComP on a 64-bit little-endian
 Linux box and within the Earthworm system on a Sparc 64-bit machine with
 Solaris 10.
\end_layout

\end_inset


\begin_inset LatexCommand label
name "tab:architectures"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Source is subdivided in two main trunks, the first contains a library called
 libnmxp designed to provide APIs for interacting with the Nanometrics servers,
 the second one is nmxptool which relies on libnmxp.
 The main flow of nmxptool is always the same for the two protocols, only
 the functions that manage the packets are different as regard to the different
 usages: monitoring data or saving mini-SEED records, Earthworm module or
 Seedlink plug-in.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status collapsed

\begin_layout Standard

\shape italic
\size scriptsize
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard

\series bold
\size scriptsize
NMXP_DATA_PROCESS Struct Reference
\end_layout

\begin_layout Standard

\size scriptsize
Parameter structure for functions that process data.
 More...
\end_layout

\begin_layout Standard

\size scriptsize
#include <nmxp_data.h>
\end_layout

\begin_layout Standard

\series bold
\size scriptsize
Public Attributes
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
key
\series default

\newline

\shape italic
Channel Key.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
char 
\series bold
network
\series default
 [NETWORK_LENGTH]
\newline

\shape italic
Network code.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
char 
\series bold
station
\series default
 [STATION_LENGTH]
\newline

\shape italic
Station code.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
char 
\series bold
channel
\series default
 [CHANNEL_LENGTH]
\newline

\shape italic
Channel code.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
packet_type
\series default

\newline

\shape italic
Packet type.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
x0
\series default

\newline

\shape italic
First sample.
 It is significant only if x0n_significant != 0.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
xn
\series default

\newline

\shape italic
Last sample.
 It is significant only if x0n_significant != 0.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
x0n_significant
\series default

\newline

\shape italic
Declare if xn significant.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
oldest_seq_no
\series default

\newline

\shape italic
Oldest Sequence number.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
seq_no
\series default

\newline

\shape italic
Sequence number.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
double 
\series bold
time
\series default

\newline

\shape italic
Time first sample.
 Epochs.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
void * 
\series bold
buffer
\series default

\newline

\shape italic
Nanometrics packet data.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
length
\series default

\newline

\shape italic
Packet length.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int * 
\series bold
pDataPtr
\series default

\newline

\shape italic
Array of samples.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
nSamp
\series default

\newline

\shape italic
Number or samples.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000

\size scriptsize
int32_t 
\series bold
sampRate
\series default

\newline

\shape italic
Sample rate.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
NMXP_DATA_PROCESS struct reference created by doxygen.
\end_layout

\end_inset


\begin_inset LatexCommand label
name "tab:nmxpdataprocess"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The library documentation has been edited by doxygen 
\begin_inset LatexCommand citet
key "doxygen"

\end_inset

 and released in html, rtf and man.
 The documentation about the most important structure NMXP_DATA_PROCESS
 has been reported as an example in table 
\begin_inset LatexCommand ref
reference "tab:nmxpdataprocess"

\end_inset

.
\end_layout

\begin_layout Standard
The most important functions in libnmxp are responsible for the management
 of the Raw Stream buffer.
 For each seismic channel, the function nmxp_raw_stream_manage(), chronologicall
y reorders the compressed packets stored into the structure ot type NMXP_DATA_PR
OCESS and then it executes the n_func_pd functions contained into the array
 p_func_pd.
 If some packet is missing, the function queue the structure into a buffers
 causing a latency for the data flow of its seismic channel.
 The waiting of the missing packet ends when the packet latency go over
 the value of the maximum tolerable set by nmxp_raw_stream_init() at beginning.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Le funzioni a cui prestare maggiore attenzione sono quelle che si occupano
 della gestione del buffer dei pacchetti nelle connessioni di tipo Raw Stream,
 cioè dei pacchetti compressi e con valore di Short-term-complete uguale
 a -1.
 Per un canale sismico la funzione nmxp_raw_stream_manage() si occupa di
 riordinare cronologicamente le strutture NMXP_DATA_PROCESS che ad ogni
 chiamata le vengono passate, successivamente di eseguire sulle stesse le
 n_func_pd funzioni i cui puntatori sono contenuti nell’array p_func_pd.
 Nel caso in cui rilevi una discontinuità temporale del dato, la funzione
 accoda in un buffer la struttura corrente inducendo così una latenza sul
 flusso dei dati per quel canale.
 L’attesa dei pacchetti mancanti termina quando il tempo massimo di latenza
 tollerabile, impostato al momento dell’inizializzazione per mezzo della
 funzione nmxp_raw_stream_init(), viene superato.
 In quest’ultimo caso la funzione forzerà l’esecuzione delle funzioni sulla
 prima struttura disponibile causando quindi un gap sul flusso dei dati.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The listing 
\begin_inset LatexCommand ref
reference "lst:pdssource"

\end_inset

 shows how writing a C program for implementing the subscription protocol
 Private Data Stream 1.4.
 nmxptool is based on this skeleton of source.
 It is possible to notice how is easy develop an application capable of
 establishing Raw Stream connection.
 The developer will declare own function with the following prototype
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,language=C,showstringspaces=false"
inline false
status open

\begin_layout Standard

int ( *process_data_function ) ( NMXP_DATA_PROCESS *)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then he will add this function to the array function pointers passed to
 nmxp_raw_stream_manage().
 Before calling the function nmxp_raw_stream_manage() for each channel,
 it needs to initialize, by the function nmxp_raw_stream_init(), a structure
 of type NMXP_RAW_STREAM_DATA and the maximum tolerable latency.
 At the end of the program, or in any case at the end of the connection,
 will be necessary freeing the allocated memory by the function nmxp_raw_stream_
free().
 Before freeing the memory, in order to flush the incidental queued NMXP_DATA_PR
OCESS structures, the function nmxp_raw_manage_stream_manage() can optionally
 be called passing pd = NULL.
 In this way, the functions contained into the array p_func_pd will be executed
 on all remaining packet independently on the data continuity.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Per sviluppare una propria applicazione in C che faccia uso della libreria
 libnmxp vengono di seguito illustrati i sorgenti 
\begin_inset LatexCommand ref
reference "lst:pdssource"

\end_inset

 1 e 2 che possono essere utilizzati come base per l’implementazione dei
 protocolli Data Access Protocol 1.0 e Private Data Stream 1.4.
 Su tali strutture di codice C è basato anche nmxptool descritto successivamente.
 E’ importante notare come risulti relativamente semplice sviluppare una
 propria applicazione anche nel caso in cui si vogliano stabilire connessioni
 di tipo Raw Stream.
 Infatti lo sviluppatore non dovrà far altro che utilizzare la struttura
 base del sorgente 2, eseguire le opportune personalizzazioni, e dichiarare
 una funzione con prototipo
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,language=C,showstringspaces=false"
inline false
status open

\begin_layout Standard

int ( *process_data_function ) ( NMXP_DATA_PROCESS *)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
il cui puntatore dovrà poi essere aggiunto nell’array da passare come parametro
 alla funzione nmxp_raw_stream_manage().
 Prima di poter richiamare la funzione nmxp_raw_stream_manage() bisogna
 inizializzare per ogni canale, tramite la funzione nmxp_raw_stream_init(),
 una struttura dati di tipo NMXP_RAW_STREAM_DATA e il valore della massima
 latenza tollerabile.
 Al termine del programma, o comunque al termine della connessione, sarà
 necessario liberare la memoria allocata dalla struttura NMXP_RAW_STREAM_DATA
 per mezzo della funzione nmxp_raw_stream_free().
 Opzionalmente, prima di questa funzione può essere richiamata nmxp_raw_manage_s
tream_flush() che esegue le funzioni sui pacchetti rimanenti indipendentemente
 dalla continuità del dato.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,caption={\textit{An example of how you can call the libnmxp APIs from a C program. The C source skeleton shows a base implementation for connecting to NaqsServer using a Raw Stream connection like it is specified by the Private Data Stream subscription protocol.}},frame=tlBR,label={lst:pdssource},language=C,numbers=left,showstringspaces=false,stepnumber=4"
inline false
status open

\begin_layout Standard

/* Print summary packet information from NMXP_DATA_PROCESS */
\end_layout

\begin_layout Standard

int my_print_seq_no(NMXP_DATA_PROCESS *pd);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Convert data from NMXP_DATA_PROCESS to another */
\end_layout

\begin_layout Standard

int my_write_someotherformat(NMXP_DATA_PROCESS *pd);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Program parameters */
\end_layout

\begin_layout Standard

struct PARAMS params;
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* List of the functions to execute on each packet.
\end_layout

\begin_layout Standard

   The functions are called at the right time by the function nmxp_raw_stream_ma
nage().
\end_layout

\begin_layout Standard

int n_func_pd = 0;
\end_layout

\begin_layout Standard

int (*p_func_pd[NMXP_MAX_FUNC_PD]) (NMXP_DATA_PROCESS *);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

...
\end_layout

\begin_layout Standard

/* Init a NMXP_RAW_STREAM_DATA structure
\end_layout

\begin_layout Standard

   N.B.
 This operation has to be executed for each channel */
\end_layout

\begin_layout Standard

nmxp_raw_stream_init(&raw_stream_buffer, max_tolerable_latency, timeoutrecv);
\end_layout

\begin_layout Standard

...
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Add function my_print_seq_no() to the list p_func_pd */
\end_layout

\begin_layout Standard

if(params.flag_print_seq_no) {
\end_layout

\begin_layout Standard

  p_func_pd[n_func_pd++] = my_print_seq_no;
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Add function my_write_someotherformat() to the list p_func_pd */
\end_layout

\begin_layout Standard

if(params.flag_writeseed) {
\end_layout

\begin_layout Standard

  p_func_pd[n_func_pd++] = my_write_someotherformat;
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* ************************************************************* */
\end_layout

\begin_layout Standard

/* Start subscription protocol "PRIVATE DATA STREAM" version 1.4 */
\end_layout

\begin_layout Standard

/* ************************************************************* */
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 1: Open a socket */
\end_layout

\begin_layout Standard

if((naqssock = nmxp_openSocket(params.hostname, params.portnumberpds)) ==
 NMXP_SOCKET_ERROR) {
\end_layout

\begin_layout Standard

  return 1;
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 2: Send a Connect */
\end_layout

\begin_layout Standard

if(nmxp_sendConnect(naqssock) != NMXP_SOCKET_OK) {
\end_layout

\begin_layout Standard

  printf("Error on sendConnect()
\backslash
n");  return 1;
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 3: Receive ChannelList */
\end_layout

\begin_layout Standard

if(nmxp_receiveChannelList(naqssock, &channelList) != NMXP_SOCKET_OK) {
\end_layout

\begin_layout Standard

  printf("Error on receiveChannelList()
\backslash
n");  return 1;
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Get a subset of channel from arguments */
\end_layout

\begin_layout Standard

channelList_subset = nmxp_chan_subset(channelList, NMXP_DATA_TIMESERIES,
 params.channels);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 4: Send a Request Pending (optional) */
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 5: Send AddChannels */
\end_layout

\begin_layout Standard

nmxp_sendAddTimeSeriesChannel(naqssock, channelList_subset, params.stc, params.rat
e,
\end_layout

\begin_layout Standard

    (params.flag_buffered)? NMXP_BUFFER_YES : NMXP_BUFFER_NO);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 6: Repeat until finished: receive and handle packets */
\end_layout

\begin_layout Standard

while(exitpdscondition) {
\end_layout

\begin_layout Standard

  /* Process Compressed or Decompressed Data */
\end_layout

\begin_layout Standard

  pd = nmxp_receiveData(naqssock, channelList_subset, CURRENT_NETWORK);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

  /* Log contents of last packet */
\end_layout

\begin_layout Standard

  nmxp_data_log(pd);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

  /* Manage Raw Stream */
\end_layout

\begin_layout Standard

  nmxp_raw_stream_manage(&raw_stream_buffer, pd, p_func_pd, n_func_pd);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

  }
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Execute functions on incidental remaining packet in buffer */
\end_layout

\begin_layout Standard

nmxp_raw_stream_manage(&raw_stream_buffer, NULL, p_func_pd, n_func_pd);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* Free a NMXP_RAW_STREAM_DATA structure
\end_layout

\begin_layout Standard

   N.B.
 This operation has to be executed for each channel */
\end_layout

\begin_layout Standard

nmxp_raw_stream_free(&raw_stream_buffer);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 7: Send Terminate Subscription */
\end_layout

\begin_layout Standard

nmxp_sendTerminateSubscription(naqssock, NMXP_SHUTDOWN_NORMAL, "Good Bye!");
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* PDS Step 8: Close the socket */
\end_layout

\begin_layout Standard

nmxp_closeSocket(naqssock);
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/* *********************************************************** */
\end_layout

\begin_layout Standard

/* End subscription protocol "PRIVATE DATA STREAM" version 1.4 */
\end_layout

\begin_layout Standard

/* *********************************************************** */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compilation
\end_layout

\begin_layout Standard
nmxptool and libnmxp has been developed using the GNU Build Tools (automake,
 autoconf and configure script) then you should be able to compile them
 everywhere you have a C compiler and you can launch the following standard
 commands:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

./configure --enable-FEATURE1 ...
 VAR1=...
 VAR2=...
\end_layout

\begin_layout Standard

make
\end_layout

\begin_layout Standard

make install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The script configure automatically tries to compile all features, for disabling
 some features you can use the following options:
\end_layout

\begin_layout Description
--disable-libmseed disable saving data in mini-SEED records
\end_layout

\begin_layout Description
--disable-ew do not compile nmxptool as Earthworm module
\end_layout

\begin_layout Description
--disable-seedlink do not compile nmxptool as Seedlink plug-in
\end_layout

\begin_layout Standard
Displaying the version of nmxptool and enabled features after compilation:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

# nmxptool --version
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

nmxptool 1.2.2, Nanometrics tool
\end_layout

\begin_layout Standard

    Private Data Stream 1.4, Data Access Protocol 1.0
\end_layout

\begin_layout Standard

    Enabled features: libmseed YES, SeedLink YES, Earthworm YES.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These features depend on the following optional software:
\end_layout

\begin_layout Description
libmseed-2.1.4 or later, from 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
url{http://www.iris.edu/manuals/}
\end_layout

\end_inset


\newline
The mini-SEED library.
\newline
It can be compiled on Unix-like operating systems,
 Mac OS X and Windows.
\end_layout

\begin_layout Description
Earthworm-6.2 or later, from 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
url{http://www.isti2.com/ew/}
\end_layout

\end_inset


\newline
Seismic data processing system.
\newline
It can be compiled on Unix-like operating
 systems, Mac OS X and Windows.
\end_layout

\begin_layout Description
Seedlink-2.5 or later, from 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
url{http://www.gfz-potsdam.de/geofon/seiscomp/}
\end_layout

\end_inset


\newline
Seedlink is a system for near real time seismic data distribution.
\newline
It can
 run mostly on Linux.
\end_layout

\begin_layout Standard
The optional libraries and how to link them to nmxptool is described in
 the following subsections.
\end_layout

\begin_layout Subsection
Libmseed
\end_layout

\begin_layout Standard
The mini-SEED library is a C library framework for manipulating and managing
 SEED data records.
 Author: Chad Trabant, IRIS DMC.
\end_layout

\begin_layout Standard
If available within include and library path, this library allows to save
 retrieved data in Mini-SEED records.
 You might add to CFLAGS this "-I/<anywhere>/libmseed" and to LDFLAGS this
 "-L/<anywhere>/libmseed", do not forget to run 'ranlib libmseed.a' or similars.
\end_layout

\begin_layout Standard
A possible command line to compile nmxptool only capable of saving data
 in mini-SEED format could be, for example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

./configure CFLAGS="-O2 -Wall -pipe -I/<anywhere>/libmseed" 
\backslash

\end_layout

\begin_layout Standard

  LDFLAGS="-L/<anywhere>/libmseed"
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Earthworm
\end_layout

\begin_layout Standard
nmxptool is included into the official Earthworm distribution since the
 version 7.2.
 Anyway, you can compile nmxptool outside the EW distribution, for example,
 to upgrade.
 Before launching 'configure', run the appropriate script from directory
 'environment', the compilation depends on the following environment variables:
 $EW_HOME, $EW_VERSION, $EW_PARAMS and $GLOBALFLAGS.
 'configure' looks for necessary Earthworm object files inside $EW_HOME/$EW_VERS
ION/lib and link them to nmxptool in order to enable Earthworm module feature.
 If some of object files are missing then it will attempt to discover sources
 dependents on your operating system and it will compile them before linking.
\end_layout

\begin_layout Standard
Some influential environment variables when you launch configure and compile
 nmxptool are:
\end_layout

\begin_layout Description
EW_HOME Earthworm home directory
\end_layout

\begin_layout Description
EW_VERSION Earthworm version directory
\end_layout

\begin_layout Description
EW_PARAMS Earthworm configuration files directory
\end_layout

\begin_layout Description
GLOBALFLAGS C compiler flags for Earthworm
\end_layout

\begin_layout Standard
An example showw how enabling only the Earthworm feature, the script automatical
ly adds 
\begin_inset Quotes eld
\end_inset

-I${EW_HOME}/${EW_VERSION}/include
\begin_inset Quotes erd
\end_inset

 to the environment variable CFLAGS:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

./configure --disable-libmseed --disable-seedlink 
\backslash

\end_layout

\begin_layout Standard

  CFLAGS="-O2 -Wall -pipe" 
\backslash

\end_layout

\begin_layout Standard

  EW_HOME="/home/ew" 
\backslash

\end_layout

\begin_layout Standard

  EW_VERSION="v7.2" 
\backslash

\end_layout

\begin_layout Standard

  EW_PARAMS="${EW_HOME}/${EW_VERSION}/params" 
\backslash

\end_layout

\begin_layout Standard

  GLOBALFLAGS="-D_SPARC -D_SOLARIS"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following values of GLOBALFLAGS can be used for compiling nmxptool on
 different platforms, they have been taken from Earthworm distribution.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

GLOBALFLAGS="-m32 -Dlinux -D__i386 -D_LINUX -D_INTEL 
\backslash

\end_layout

\begin_layout Standard

            -D_USE_SCHED -D_USE_PTHREADS -D_USE_TERMIOS"
\end_layout

\begin_layout Standard

GLOBALFLAGS="-D_MACOSX -D_INTEL -D_USE_PTHREADS -D_USE_SCHED"
\end_layout

\begin_layout Standard

GLOBALFLAGS="-D_WINNT -D_INTEL -D_CRT_SECURE_NO_DEPRECATE 
\backslash

\end_layout

\begin_layout Standard

            -D_USE_32BIT_TIME_T"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last one has to be used to compile Earthworm feature under Windows-MinGW.
\end_layout

\begin_layout Standard
Install binary and configuration files for Earthworm:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

make install-ew-conf ( # ONLY THE FIRST TIME # )
\end_layout

\begin_layout Standard

make install-ew-bin
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first command copies nmxptool binary in $EW_HOME/$EW_VERSION/bin The
 second command copies earthworm/nmxptool.d, earthworm/nmxptool.desc in $EW_PARAMS
 If you are upgrading nmxptool then you might do that:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status collapsed

\begin_layout Standard

make install-ew-doc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Last command copies nmxptool_ovr.html and nmxptool_cmd.html into the directories
\end_layout

\begin_layout Standard
$EW_HOME/$EW_VERSION/ewdoc/WEB_DOC/ovr
\end_layout

\begin_layout Standard
and
\end_layout

\begin_layout Standard
$EW_HOME/$EW_VERSION/ewdoc/WEB_DOC/cmd 
\end_layout

\begin_layout Subsection
Seedlink
\end_layout

\begin_layout Standard
Seedlink is a system for near real time seismic data distribution.
 Inside the directory 'src' of nmxptool distribution has been copied files
 'seedlink_plugin.c' and 'seedlink_plugin.h' from 'plugin.c' and 'plugin.h'
 belonging to the SeisComP 2.5 distribution.
\end_layout

\begin_layout Standard
An example to compile enabling only features libmseed and seedlink:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

./configure --disable-ew 
\backslash

\end_layout

\begin_layout Standard

  CFLAGS="-O2 -Wall -pipe -I/<anywhere>/libmseed" 
\backslash

\end_layout

\begin_layout Standard

  LDFLAGS="-L/<anywhere>/libmseed"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your SeisComP root directory is not equal to /home/sysop/seiscomp, you
 have to launch the script 'configure' in the following way:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

./configure ...
 ...
 SEISCOMPDIR=/<where>/<seiscompdir>/<is>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Install binary and template files for Seedlink:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

make install-seiscomp-templates ( # ONLY THE FIRST TIME # )
\end_layout

\begin_layout Standard

make install-seiscomp-bin
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first command copies nmxptool binary in %SEISCOMPDIR%/acquisition/bin
 The second command copies the directory seiscomp_templates/135_nmxptool
 in %SEISCOMPDIR%/acquisition/templates/source/
\end_layout

\begin_layout Standard
After, you can use:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Standard

seiscomp config
\end_layout

\end_inset


\end_layout

\begin_layout Section
Usages
\end_layout

\begin_layout Itemize
List of the available channels
\end_layout

\begin_layout Itemize
Matching channel
\end_layout

\begin_layout Itemize
Network code only for output
\end_layout

\begin_layout Itemize
Time declaration.
\end_layout

\begin_layout Itemize
Main common parameters.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
nmxptool 1.2.2, Nanometrics tool
\end_layout

\begin_layout Standard
         Private Data Stream 1.4, Data Access Protocol 1.0
\end_layout

\begin_layout Standard
         Enabled features: libmseed YES, SeedLink YES, Earthworm YES.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Usage: nmxptool -H hostname   -l | -L
\end_layout

\begin_layout Standard
             Print list of the available Time Series channels
\end_layout

\begin_layout Standard
             on DataServer and NaqsServer respectively.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool -H hostname -C channellist [...]
\end_layout

\begin_layout Standard
             Receive data in near real-time from NaqsServer by PDS 1.4
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool -H hostname -F statefile [-A SECs] [...]
\end_layout

\begin_layout Standard
             Receive data from NaqsServer and, in case, retrieve previous
\end_layout

\begin_layout Standard
             data from DataServer up to SECs seconds before.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool -H hostname -C channellist -s DATE -e DATE [...]
\end_layout

\begin_layout Standard
       nmxptool -H hostname -C channellist -s DATE -t TIME [...]
\end_layout

\begin_layout Standard
             Receive a temporal interval of data from DataServer by DAP
 1.0
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool nmxptool.d
\end_layout

\begin_layout Standard
             Launched as Earthworm module to redirect data into the EW-Rings.
\end_layout

\begin_layout Standard
             Refer to nmxptool_cmd.html into the Earthworm documentation.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool <option ...
 option> -k
\end_layout

\begin_layout Standard
             Launched as SeedLink plug-in to feed the SL-Server.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
       nmxptool --help | -h
\end_layout

\begin_layout Standard
             Print this help.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Main arguments:
\end_layout

\begin_layout Standard
  -H, --hostname=HOST     NaqsServer/DataServer hostname or IP address.
\end_layout

\begin_layout Standard
  -C, --channels=LIST     List of NET.STA.CHAN separated by comma.
\end_layout

\begin_layout Standard
                          NET  is optional and used only for output.
\end_layout

\begin_layout Standard
                          STA  can be '*', it stands for all stations.
\end_layout

\begin_layout Standard
                          CHAN can contain '?', it stands for any character.
\end_layout

\begin_layout Standard
                          Network code will be assigned from the first
\end_layout

\begin_layout Standard
                          pattern that includes station and channel.
\end_layout

\begin_layout Standard
                          DO NOT USE with -F.
\end_layout

\begin_layout Standard
                                Example: N1.AAA.HH?,N2.*.HH?,MMM.BH?
\end_layout

\begin_layout Standard
                          Second pattern includes the first.
 Unless AAA, all
\end_layout

\begin_layout Standard
                          stations with HH channels will have network to
 N2.
\end_layout

\begin_layout Standard
                          Station MMM will have default network defined
 by -N.
\end_layout

\begin_layout Standard
  -F, --statefile=FILE    List of channel patterns, as in -C.
 One for each line.
\end_layout

\begin_layout Standard
                          Load/Save time of the last sample of each channel
\end_layout

\begin_layout Standard
                          into a file with the same name, same directory,
\end_layout

\begin_layout Standard
                          appending the suffix '.nmxpstate'.
\end_layout

\begin_layout Standard
                          Allow data continuity when short disconnections
 occur.
\end_layout

\begin_layout Standard
                          Related to -A and -f, it enables -b.
\end_layout

\begin_layout Standard
                          DO NOT USE with -C.
\end_layout

\begin_layout Standard
  -A, --maxdataretr=SECs  Max amount of data of the past to retrieve from
 the
\end_layout

\begin_layout Standard
                          DataServer when program restarts (default 0) [0..86400].
\end_layout

\begin_layout Standard
                          0 to disable connection to DataServer.
\end_layout

\begin_layout Standard
                          If this option is equal to zero and -F is used,
\end_layout

\begin_layout Standard
                          only data buffered by NaqsServer will be retrieved.
\end_layout

\begin_layout Standard
                          Rather than using -A, it is preferable, inside
 the section
\end_layout

\begin_layout Standard
                          Datastream of the file Naqs.ini, setting DataBufferLeng
th
\end_layout

\begin_layout Standard
                          to a high value.
 -A allows to retrieve much more
\end_layout

\begin_layout Standard
                          data of the past when the program restarts but
 it
\end_layout

\begin_layout Standard
                          considerably slows down the execution.
\end_layout

\begin_layout Standard
                          It is extremely harmful when you have many channels,
\end_layout

\begin_layout Standard
                          in this case you might consider to subdivide the
\end_layout

\begin_layout Standard
                          channels into different nmxptool instances.
\end_layout

\begin_layout Standard
                          Related to -F.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
PDS arguments for NaqsServer:
\end_layout

\begin_layout Standard
  -P, --portpds=PORT      NaqsServer port number (default 28000).
\end_layout

\begin_layout Standard
  -S, --stc=SECs          Short-Term-Completion (default -1).
\end_layout

\begin_layout Standard
                          -1 is for Raw Stream, no Short-Term-Completion.
\end_layout

\begin_layout Standard
                             Packets contain compressed data.
 Related to -M, -T.
\end_layout

\begin_layout Standard
                             It enables --rate=-1.
\end_layout

\begin_layout Standard
                           0 decompressed packets are received in chronological
\end_layout

\begin_layout Standard
                             order without waiting for missing packets.
\end_layout

\begin_layout Standard
                          [1..300] decompressed packets are received in
\end_layout

\begin_layout Standard
                             chronological order but waiting for missing
 packets
\end_layout

\begin_layout Standard
                             at most SECs seconds.
\end_layout

\begin_layout Standard
  -R, --rate=Hz           Receive data with specified sample rate (default
 -1).
\end_layout

\begin_layout Standard
                          -1 for original sample rate and compressed data.
\end_layout

\begin_layout Standard
                           0 for original sample rate and decompressed data.
\end_layout

\begin_layout Standard
                          >0 for specified sample rate and decompressed
 data.
\end_layout

\begin_layout Standard
  -b, --buffered          Request also recent packets into the past.
\end_layout

\begin_layout Standard
  -B, --buffdate=DATE     Request also recent packets into the past
\end_layout

\begin_layout Standard
                          but consider only samples after DATE.
\end_layout

\begin_layout Standard
  -f, --mschan=mSECs/nC   mSECs are milliseconds to wait before the next
 request,
\end_layout

\begin_layout Standard
                          nC is the number of channels to request at a time.
\end_layout

\begin_layout Standard
                          Delaying and requesting few channels at a time
 make
\end_layout

\begin_layout Standard
                          data buffering on NaqsServer side more efficient.
\end_layout

\begin_layout Standard
                          Determined empiric values are default 280/9.
\end_layout

\begin_layout Standard
                          Condition: TotalNumberOfChannels * (mSECs/nC)
 < 15 sec.
\end_layout

\begin_layout Standard
                          Related to -F and -b.
 0/0 for disabling.
\end_layout

\begin_layout Standard
  -L, --listchannelsnaqs  List of the available Time Series channels on
 NaqsServer.
\end_layout

\begin_layout Standard
  -M, --maxlatency=SECs   Max tolerable latency (default 600) [60..600].
\end_layout

\begin_layout Standard
                          Enable NaqsServer to send out retransmission requests
\end_layout

\begin_layout Standard
                          for missed packets.
 Inside the section NetworkInterface
\end_layout

\begin_layout Standard
                          of the file Naqs.ini set RetxRequest to Enabled.
\end_layout

\begin_layout Standard
                          If RetxRequest is not enabled then -M is ineffective.
\end_layout

\begin_layout Standard
  -T, --timeoutrecv=SECs  Time-out for flushing queued packets of each channel.
\end_layout

\begin_layout Standard
                          It sets --mschan=0/0 (default 0, no time-out)
 [10..300].
\end_layout

\begin_layout Standard
                          -T is useful for retrieving Data On Demand with
 minimum delay.
\end_layout

\begin_layout Standard
                          -M, -T are usable only with Raw Stream, -S=-1.
\end_layout

\begin_layout Standard
                          In general, -M and -T are not used together.
\end_layout

\begin_layout Standard
                          Receiving signals interrupts the time out.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
DAP arguments for DataServer:
\end_layout

\begin_layout Standard
  -D, --portdap=PORT      DataServer port number (default 28002).
\end_layout

\begin_layout Standard
  -s, --start_time=DATE   Start time in date format.
\end_layout

\begin_layout Standard
  -e, --end_time=DATE     End time in date format.
\end_layout

\begin_layout Standard
                          DATE can be in formats:
\end_layout

\begin_layout Standard
                              <date>,<time> | <date>
\end_layout

\begin_layout Standard
                          where:
\end_layout

\begin_layout Standard
                              <date> = yyyy/mm/dd | yyy.jjj
\end_layout

\begin_layout Standard
                              <time> = hh:mm:ss | hh:mm:ss.dddd | hh:mm
\end_layout

\begin_layout Standard
  -t, --interval=TIME     Time interval from start_time (greater than zero).
\end_layout

\begin_layout Standard
                          TIME is in seconds, otherwise append 'm' for minutes
\end_layout

\begin_layout Standard
                          'h' for hours or 'd' for days.
 [1 sec ..
 31 days]
\end_layout

\begin_layout Standard
                          DO NOT USE with -e.
\end_layout

\begin_layout Standard
  -d, --delay=TIME        Receive continuosly data with delay [60 sec ..
 31 days].
\end_layout

\begin_layout Standard
  -u, --username=USER     DataServer username.
\end_layout

\begin_layout Standard
  -p, --password=PASS     DataServer password.
\end_layout

\begin_layout Standard
  -l, --listchannels      List of the available Time Series channels on
 DataServer.
\end_layout

\begin_layout Standard
  -i, --channelinfo       Print channelinfo (network name) when using -l.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Other arguments:
\end_layout

\begin_layout Standard
  -N, --network=NET       Default output Network code.
 (default 'XX').
\end_layout

\begin_layout Standard
  -n, --location=LOC      Default output Location code.
 DISABLED!
\end_layout

\begin_layout Standard
  -v, --verbose=LEVEL     Be verbose.
 LEVEL is a bitmap:
\end_layout

\begin_layout Standard
                          1 Channel State, 2 Channel, 4 Raw Stream,
\end_layout

\begin_layout Standard
                          8 CRC32, 16 Connection flow,
\end_layout

\begin_layout Standard
                          32 Packet Management, 64 Extra, 128 Date,
\end_layout

\begin_layout Standard
                          256 Gap, 512 DOD, 1023 All messages.
\end_layout

\begin_layout Standard
  -g, --logdata           Print info about packet data.
\end_layout

\begin_layout Standard
  -G, --logsample         Print sample values of packets.
 Includes -g.
\end_layout

\begin_layout Standard
  -m, --writeseed         Pack received data in Mini-SEED records
\end_layout

\begin_layout Standard
                          and write to a file.
\end_layout

\begin_layout Standard
  -w, --writefile         Dump received packets to a file.
\end_layout

\begin_layout Standard
  -k, --slink=PLUGINID    Send received data to SeedLink as a plug-in.
\end_layout

\begin_layout Standard
                          This option, inside the file seedlink.ini, must
 be
\end_layout

\begin_layout Standard
                          the last without adding value for PLUGINID!
\end_layout

\begin_layout Standard
                          PLUGINID is set by SeisComP daemon.
\end_layout

\begin_layout Standard
  -E, --testport=PORT     Accept 'telnet' connection on PORT
\end_layout

\begin_layout Standard
                          for data testing and diagnostic purposes.
\end_layout

\begin_layout Standard
  -V, --version           Print tool version.
\end_layout

\begin_layout Standard
  -h, --help              Print this help.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Signal handling:
\end_layout

\begin_layout Standard
   INT QUIT TERM          Sending these signals to nmxptool causes it
\end_layout

\begin_layout Standard
                          to immediately attempt to gracefully terminate.
\end_layout

\begin_layout Standard
                          It may take several seconds to complete exiting.
\end_layout

\begin_layout Standard
   ALRM                   Print current info about Raw Stream buffer.
\end_layout

\begin_layout Standard
   HUP PIPE               Ignored.
 (SIG_IGN)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Matteo Quintiliani - Istituto Nazionale di Geofisica e Vulcanologia - Italy
\end_layout

\begin_layout Standard
Mail bug reports and suggestions to <quintiliani@ingv.it>.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See figure 
\begin_inset LatexCommand ref
reference "fig:nmxptoolusages"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /Users/mtheo/Desktop/cvswork/nmxptool/no_dist/paper/images/nanometrics_nmxptool_usages.eps.gz
	width 15cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Caption

\begin_layout Standard

\shape italic
Main nmxptool usages: Earthworm module, Seedlink plug-in, Stand-alone.
 Main options: -F, -A, -M, -T.
\end_layout

\end_inset


\begin_inset LatexCommand label
name "fig:nmxptoolusages"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stand-alone
\end_layout

\begin_layout Itemize
List of available channel.
\end_layout

\begin_layout Itemize
Monitoring data.
\end_layout

\begin_layout Itemize
Saving mini-SEED.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Fare riferimento al rapporto tecnico pagina 17
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Earthworm
\end_layout

\begin_layout Itemize
Redirect data into the Earthworm ring.
\end_layout

\begin_layout Itemize
Example of earthworm configuration.
\end_layout

\begin_layout Itemize
Documentation.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
nmxptool può essere eseguito come modulo del sistema Earthworm.
 Generalmente il tipo di connessione eseguita è di tipo Raw Stream e i parametri
, invece di essere passati tramite linea di comando, vengono letti da un
 file di configurazione tipo .d, rispettando così lo standard dei moduli
 Earthworm.
 All’interno della distribuzione sono disponibili i due file nmxptool.d e
 nmxptool.desc, i quali possono essere usati come base per la configurazione
 di nmxptool all’interno del sistema Earthworm.
 E’ comunque in corso la richiesta per inserire nmxptool nelle distribuzioni
 ufficiali di Earthworm.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Seedlink
\end_layout

\begin_layout Itemize
Redirect data into the Seedlink server.
\end_layout

\begin_layout Itemize
Example of plug-in configuration.
\end_layout

\begin_layout Itemize
Templates.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Con qualsiasi configurazione di opzioni descritte precedentemente, nmxptool
 può essere lanciato come un plug-in per SeedLink per mezzo dell’utilizzo
 dell’opzione -k.
 Questa opzione deve essere necessariamente dichiarata per ultima.
 All’interno della distribuzione sono inoltre disponibili i templates SeedLink
 necessari alla configurazione del plug-in tramite il comando “seiscomp
 config”.
 E’ comunque in corso la richiesta per inserire nmxptool fra i plug-in delle
 distribuzioni ufficiali di SeisComP.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Test and results
\end_layout

\begin_layout Itemize
Test.
 Almost all packets are retrieved within 60 seconds.
\end_layout

\begin_layout Itemize
Data Completeness.
 SDS and BUD
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Fare riferimento al rapporto tecnico 3.3 pag.
 21 e il test nelle conclusioni a pag.
 22
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Itemize
Future.
\end_layout

\begin_deeper
\begin_layout Itemize
Maintenance, improvements, bug fixes.
\end_layout

\begin_layout Itemize
SDS and BUD
\end_layout

\begin_layout Itemize
Manage information about state-of-health, triggers and events.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Fare riferimento al rapporto tecnico conclusioni a pag.
 22
\end_layout

\end_inset


\end_layout

\begin_layout Acknowledgement
I would like to ...
\end_layout

\begin_layout Acknowledgement
\begin_inset LatexCommand bibtex
options "elsart-harv"
bibfiles "references"

\end_inset


\newpage

\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\end_layout

\end_body
\end_document
